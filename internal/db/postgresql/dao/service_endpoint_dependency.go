// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ServiceEndpointDependency is an object representing the database table.
type ServiceEndpointDependency struct {
	ID                          int64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	ServiceEndpointID           int64 `boil:"service_endpoint_id" json:"service_endpoint_id" toml:"service_endpoint_id" yaml:"service_endpoint_id"`
	DependencyServiceEndpointID int64 `boil:"dependency_service_endpoint_id" json:"dependency_service_endpoint_id" toml:"dependency_service_endpoint_id" yaml:"dependency_service_endpoint_id"`

	R *serviceEndpointDependencyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L serviceEndpointDependencyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ServiceEndpointDependencyColumns = struct {
	ID                          string
	ServiceEndpointID           string
	DependencyServiceEndpointID string
}{
	ID:                          "id",
	ServiceEndpointID:           "service_endpoint_id",
	DependencyServiceEndpointID: "dependency_service_endpoint_id",
}

// Generated where

var ServiceEndpointDependencyWhere = struct {
	ID                          whereHelperint64
	ServiceEndpointID           whereHelperint64
	DependencyServiceEndpointID whereHelperint64
}{
	ID:                          whereHelperint64{field: "\"service_endpoint_dependency\".\"id\""},
	ServiceEndpointID:           whereHelperint64{field: "\"service_endpoint_dependency\".\"service_endpoint_id\""},
	DependencyServiceEndpointID: whereHelperint64{field: "\"service_endpoint_dependency\".\"dependency_service_endpoint_id\""},
}

// ServiceEndpointDependencyRels is where relationship names are stored.
var ServiceEndpointDependencyRels = struct {
	DependencyServiceEndpoint string
	ServiceEndpoint           string
}{
	DependencyServiceEndpoint: "DependencyServiceEndpoint",
	ServiceEndpoint:           "ServiceEndpoint",
}

// serviceEndpointDependencyR is where relationships are stored.
type serviceEndpointDependencyR struct {
	DependencyServiceEndpoint *ServiceEndpoint `boil:"DependencyServiceEndpoint" json:"DependencyServiceEndpoint" toml:"DependencyServiceEndpoint" yaml:"DependencyServiceEndpoint"`
	ServiceEndpoint           *ServiceEndpoint `boil:"ServiceEndpoint" json:"ServiceEndpoint" toml:"ServiceEndpoint" yaml:"ServiceEndpoint"`
}

// NewStruct creates a new relationship struct
func (*serviceEndpointDependencyR) NewStruct() *serviceEndpointDependencyR {
	return &serviceEndpointDependencyR{}
}

// serviceEndpointDependencyL is where Load methods for each relationship are stored.
type serviceEndpointDependencyL struct{}

var (
	serviceEndpointDependencyAllColumns            = []string{"id", "service_endpoint_id", "dependency_service_endpoint_id"}
	serviceEndpointDependencyColumnsWithoutDefault = []string{"service_endpoint_id", "dependency_service_endpoint_id"}
	serviceEndpointDependencyColumnsWithDefault    = []string{"id"}
	serviceEndpointDependencyPrimaryKeyColumns     = []string{"id"}
)

type (
	// ServiceEndpointDependencySlice is an alias for a slice of pointers to ServiceEndpointDependency.
	// This should generally be used opposed to []ServiceEndpointDependency.
	ServiceEndpointDependencySlice []*ServiceEndpointDependency
	// ServiceEndpointDependencyHook is the signature for custom ServiceEndpointDependency hook methods
	ServiceEndpointDependencyHook func(context.Context, boil.ContextExecutor, *ServiceEndpointDependency) error

	serviceEndpointDependencyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	serviceEndpointDependencyType                 = reflect.TypeOf(&ServiceEndpointDependency{})
	serviceEndpointDependencyMapping              = queries.MakeStructMapping(serviceEndpointDependencyType)
	serviceEndpointDependencyPrimaryKeyMapping, _ = queries.BindMapping(serviceEndpointDependencyType, serviceEndpointDependencyMapping, serviceEndpointDependencyPrimaryKeyColumns)
	serviceEndpointDependencyInsertCacheMut       sync.RWMutex
	serviceEndpointDependencyInsertCache          = make(map[string]insertCache)
	serviceEndpointDependencyUpdateCacheMut       sync.RWMutex
	serviceEndpointDependencyUpdateCache          = make(map[string]updateCache)
	serviceEndpointDependencyUpsertCacheMut       sync.RWMutex
	serviceEndpointDependencyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var serviceEndpointDependencyBeforeInsertHooks []ServiceEndpointDependencyHook
var serviceEndpointDependencyBeforeUpdateHooks []ServiceEndpointDependencyHook
var serviceEndpointDependencyBeforeDeleteHooks []ServiceEndpointDependencyHook
var serviceEndpointDependencyBeforeUpsertHooks []ServiceEndpointDependencyHook

var serviceEndpointDependencyAfterInsertHooks []ServiceEndpointDependencyHook
var serviceEndpointDependencyAfterSelectHooks []ServiceEndpointDependencyHook
var serviceEndpointDependencyAfterUpdateHooks []ServiceEndpointDependencyHook
var serviceEndpointDependencyAfterDeleteHooks []ServiceEndpointDependencyHook
var serviceEndpointDependencyAfterUpsertHooks []ServiceEndpointDependencyHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ServiceEndpointDependency) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serviceEndpointDependencyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ServiceEndpointDependency) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serviceEndpointDependencyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ServiceEndpointDependency) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serviceEndpointDependencyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ServiceEndpointDependency) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serviceEndpointDependencyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ServiceEndpointDependency) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serviceEndpointDependencyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ServiceEndpointDependency) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serviceEndpointDependencyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ServiceEndpointDependency) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serviceEndpointDependencyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ServiceEndpointDependency) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serviceEndpointDependencyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ServiceEndpointDependency) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serviceEndpointDependencyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddServiceEndpointDependencyHook registers your hook function for all future operations.
func AddServiceEndpointDependencyHook(hookPoint boil.HookPoint, serviceEndpointDependencyHook ServiceEndpointDependencyHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		serviceEndpointDependencyBeforeInsertHooks = append(serviceEndpointDependencyBeforeInsertHooks, serviceEndpointDependencyHook)
	case boil.BeforeUpdateHook:
		serviceEndpointDependencyBeforeUpdateHooks = append(serviceEndpointDependencyBeforeUpdateHooks, serviceEndpointDependencyHook)
	case boil.BeforeDeleteHook:
		serviceEndpointDependencyBeforeDeleteHooks = append(serviceEndpointDependencyBeforeDeleteHooks, serviceEndpointDependencyHook)
	case boil.BeforeUpsertHook:
		serviceEndpointDependencyBeforeUpsertHooks = append(serviceEndpointDependencyBeforeUpsertHooks, serviceEndpointDependencyHook)
	case boil.AfterInsertHook:
		serviceEndpointDependencyAfterInsertHooks = append(serviceEndpointDependencyAfterInsertHooks, serviceEndpointDependencyHook)
	case boil.AfterSelectHook:
		serviceEndpointDependencyAfterSelectHooks = append(serviceEndpointDependencyAfterSelectHooks, serviceEndpointDependencyHook)
	case boil.AfterUpdateHook:
		serviceEndpointDependencyAfterUpdateHooks = append(serviceEndpointDependencyAfterUpdateHooks, serviceEndpointDependencyHook)
	case boil.AfterDeleteHook:
		serviceEndpointDependencyAfterDeleteHooks = append(serviceEndpointDependencyAfterDeleteHooks, serviceEndpointDependencyHook)
	case boil.AfterUpsertHook:
		serviceEndpointDependencyAfterUpsertHooks = append(serviceEndpointDependencyAfterUpsertHooks, serviceEndpointDependencyHook)
	}
}

// One returns a single serviceEndpointDependency record from the query.
func (q serviceEndpointDependencyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceEndpointDependency, error) {
	o := &ServiceEndpointDependency{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for service_endpoint_dependency")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ServiceEndpointDependency records from the query.
func (q serviceEndpointDependencyQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceEndpointDependencySlice, error) {
	var o []*ServiceEndpointDependency

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ServiceEndpointDependency slice")
	}

	if len(serviceEndpointDependencyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ServiceEndpointDependency records in the query.
func (q serviceEndpointDependencyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count service_endpoint_dependency rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q serviceEndpointDependencyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if service_endpoint_dependency exists")
	}

	return count > 0, nil
}

// DependencyServiceEndpoint pointed to by the foreign key.
func (o *ServiceEndpointDependency) DependencyServiceEndpoint(mods ...qm.QueryMod) serviceEndpointQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DependencyServiceEndpointID),
	}

	queryMods = append(queryMods, mods...)

	query := ServiceEndpoints(queryMods...)
	queries.SetFrom(query.Query, "\"service_endpoint\"")

	return query
}

// ServiceEndpoint pointed to by the foreign key.
func (o *ServiceEndpointDependency) ServiceEndpoint(mods ...qm.QueryMod) serviceEndpointQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ServiceEndpointID),
	}

	queryMods = append(queryMods, mods...)

	query := ServiceEndpoints(queryMods...)
	queries.SetFrom(query.Query, "\"service_endpoint\"")

	return query
}

// LoadDependencyServiceEndpoint allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (serviceEndpointDependencyL) LoadDependencyServiceEndpoint(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceEndpointDependency interface{}, mods queries.Applicator) error {
	var slice []*ServiceEndpointDependency
	var object *ServiceEndpointDependency

	if singular {
		object = maybeServiceEndpointDependency.(*ServiceEndpointDependency)
	} else {
		slice = *maybeServiceEndpointDependency.(*[]*ServiceEndpointDependency)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &serviceEndpointDependencyR{}
		}
		args = append(args, object.DependencyServiceEndpointID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &serviceEndpointDependencyR{}
			}

			for _, a := range args {
				if a == obj.DependencyServiceEndpointID {
					continue Outer
				}
			}

			args = append(args, obj.DependencyServiceEndpointID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`service_endpoint`),
		qm.WhereIn(`service_endpoint.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ServiceEndpoint")
	}

	var resultSlice []*ServiceEndpoint
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ServiceEndpoint")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for service_endpoint")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for service_endpoint")
	}

	if len(serviceEndpointDependencyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DependencyServiceEndpoint = foreign
		if foreign.R == nil {
			foreign.R = &serviceEndpointR{}
		}
		foreign.R.DependencyServiceEndpointServiceEndpointDependencies = append(foreign.R.DependencyServiceEndpointServiceEndpointDependencies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DependencyServiceEndpointID == foreign.ID {
				local.R.DependencyServiceEndpoint = foreign
				if foreign.R == nil {
					foreign.R = &serviceEndpointR{}
				}
				foreign.R.DependencyServiceEndpointServiceEndpointDependencies = append(foreign.R.DependencyServiceEndpointServiceEndpointDependencies, local)
				break
			}
		}
	}

	return nil
}

// LoadServiceEndpoint allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (serviceEndpointDependencyL) LoadServiceEndpoint(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceEndpointDependency interface{}, mods queries.Applicator) error {
	var slice []*ServiceEndpointDependency
	var object *ServiceEndpointDependency

	if singular {
		object = maybeServiceEndpointDependency.(*ServiceEndpointDependency)
	} else {
		slice = *maybeServiceEndpointDependency.(*[]*ServiceEndpointDependency)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &serviceEndpointDependencyR{}
		}
		args = append(args, object.ServiceEndpointID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &serviceEndpointDependencyR{}
			}

			for _, a := range args {
				if a == obj.ServiceEndpointID {
					continue Outer
				}
			}

			args = append(args, obj.ServiceEndpointID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`service_endpoint`),
		qm.WhereIn(`service_endpoint.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ServiceEndpoint")
	}

	var resultSlice []*ServiceEndpoint
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ServiceEndpoint")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for service_endpoint")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for service_endpoint")
	}

	if len(serviceEndpointDependencyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ServiceEndpoint = foreign
		if foreign.R == nil {
			foreign.R = &serviceEndpointR{}
		}
		foreign.R.ServiceEndpointDependencies = append(foreign.R.ServiceEndpointDependencies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ServiceEndpointID == foreign.ID {
				local.R.ServiceEndpoint = foreign
				if foreign.R == nil {
					foreign.R = &serviceEndpointR{}
				}
				foreign.R.ServiceEndpointDependencies = append(foreign.R.ServiceEndpointDependencies, local)
				break
			}
		}
	}

	return nil
}

// SetDependencyServiceEndpoint of the serviceEndpointDependency to the related item.
// Sets o.R.DependencyServiceEndpoint to related.
// Adds o to related.R.DependencyServiceEndpointServiceEndpointDependencies.
func (o *ServiceEndpointDependency) SetDependencyServiceEndpoint(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ServiceEndpoint) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"service_endpoint_dependency\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"dependency_service_endpoint_id"}),
		strmangle.WhereClause("\"", "\"", 2, serviceEndpointDependencyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DependencyServiceEndpointID = related.ID
	if o.R == nil {
		o.R = &serviceEndpointDependencyR{
			DependencyServiceEndpoint: related,
		}
	} else {
		o.R.DependencyServiceEndpoint = related
	}

	if related.R == nil {
		related.R = &serviceEndpointR{
			DependencyServiceEndpointServiceEndpointDependencies: ServiceEndpointDependencySlice{o},
		}
	} else {
		related.R.DependencyServiceEndpointServiceEndpointDependencies = append(related.R.DependencyServiceEndpointServiceEndpointDependencies, o)
	}

	return nil
}

// SetServiceEndpoint of the serviceEndpointDependency to the related item.
// Sets o.R.ServiceEndpoint to related.
// Adds o to related.R.ServiceEndpointDependencies.
func (o *ServiceEndpointDependency) SetServiceEndpoint(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ServiceEndpoint) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"service_endpoint_dependency\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"service_endpoint_id"}),
		strmangle.WhereClause("\"", "\"", 2, serviceEndpointDependencyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ServiceEndpointID = related.ID
	if o.R == nil {
		o.R = &serviceEndpointDependencyR{
			ServiceEndpoint: related,
		}
	} else {
		o.R.ServiceEndpoint = related
	}

	if related.R == nil {
		related.R = &serviceEndpointR{
			ServiceEndpointDependencies: ServiceEndpointDependencySlice{o},
		}
	} else {
		related.R.ServiceEndpointDependencies = append(related.R.ServiceEndpointDependencies, o)
	}

	return nil
}

// ServiceEndpointDependencies retrieves all the records using an executor.
func ServiceEndpointDependencies(mods ...qm.QueryMod) serviceEndpointDependencyQuery {
	mods = append(mods, qm.From("\"service_endpoint_dependency\""))
	return serviceEndpointDependencyQuery{NewQuery(mods...)}
}

// FindServiceEndpointDependency retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindServiceEndpointDependency(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ServiceEndpointDependency, error) {
	serviceEndpointDependencyObj := &ServiceEndpointDependency{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"service_endpoint_dependency\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, serviceEndpointDependencyObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from service_endpoint_dependency")
	}

	return serviceEndpointDependencyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ServiceEndpointDependency) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no service_endpoint_dependency provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(serviceEndpointDependencyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	serviceEndpointDependencyInsertCacheMut.RLock()
	cache, cached := serviceEndpointDependencyInsertCache[key]
	serviceEndpointDependencyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			serviceEndpointDependencyAllColumns,
			serviceEndpointDependencyColumnsWithDefault,
			serviceEndpointDependencyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(serviceEndpointDependencyType, serviceEndpointDependencyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(serviceEndpointDependencyType, serviceEndpointDependencyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"service_endpoint_dependency\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"service_endpoint_dependency\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into service_endpoint_dependency")
	}

	if !cached {
		serviceEndpointDependencyInsertCacheMut.Lock()
		serviceEndpointDependencyInsertCache[key] = cache
		serviceEndpointDependencyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ServiceEndpointDependency.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ServiceEndpointDependency) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	serviceEndpointDependencyUpdateCacheMut.RLock()
	cache, cached := serviceEndpointDependencyUpdateCache[key]
	serviceEndpointDependencyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			serviceEndpointDependencyAllColumns,
			serviceEndpointDependencyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update service_endpoint_dependency, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"service_endpoint_dependency\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, serviceEndpointDependencyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(serviceEndpointDependencyType, serviceEndpointDependencyMapping, append(wl, serviceEndpointDependencyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update service_endpoint_dependency row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for service_endpoint_dependency")
	}

	if !cached {
		serviceEndpointDependencyUpdateCacheMut.Lock()
		serviceEndpointDependencyUpdateCache[key] = cache
		serviceEndpointDependencyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q serviceEndpointDependencyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for service_endpoint_dependency")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for service_endpoint_dependency")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ServiceEndpointDependencySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serviceEndpointDependencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"service_endpoint_dependency\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, serviceEndpointDependencyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in serviceEndpointDependency slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all serviceEndpointDependency")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ServiceEndpointDependency) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no service_endpoint_dependency provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(serviceEndpointDependencyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	serviceEndpointDependencyUpsertCacheMut.RLock()
	cache, cached := serviceEndpointDependencyUpsertCache[key]
	serviceEndpointDependencyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			serviceEndpointDependencyAllColumns,
			serviceEndpointDependencyColumnsWithDefault,
			serviceEndpointDependencyColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			serviceEndpointDependencyAllColumns,
			serviceEndpointDependencyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert service_endpoint_dependency, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(serviceEndpointDependencyPrimaryKeyColumns))
			copy(conflict, serviceEndpointDependencyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"service_endpoint_dependency\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(serviceEndpointDependencyType, serviceEndpointDependencyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(serviceEndpointDependencyType, serviceEndpointDependencyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert service_endpoint_dependency")
	}

	if !cached {
		serviceEndpointDependencyUpsertCacheMut.Lock()
		serviceEndpointDependencyUpsertCache[key] = cache
		serviceEndpointDependencyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ServiceEndpointDependency record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ServiceEndpointDependency) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ServiceEndpointDependency provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), serviceEndpointDependencyPrimaryKeyMapping)
	sql := "DELETE FROM \"service_endpoint_dependency\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from service_endpoint_dependency")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for service_endpoint_dependency")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q serviceEndpointDependencyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no serviceEndpointDependencyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from service_endpoint_dependency")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for service_endpoint_dependency")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ServiceEndpointDependencySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(serviceEndpointDependencyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serviceEndpointDependencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"service_endpoint_dependency\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, serviceEndpointDependencyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from serviceEndpointDependency slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for service_endpoint_dependency")
	}

	if len(serviceEndpointDependencyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ServiceEndpointDependency) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindServiceEndpointDependency(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ServiceEndpointDependencySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ServiceEndpointDependencySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serviceEndpointDependencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"service_endpoint_dependency\".* FROM \"service_endpoint_dependency\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, serviceEndpointDependencyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ServiceEndpointDependencySlice")
	}

	*o = slice

	return nil
}

// ServiceEndpointDependencyExists checks if the ServiceEndpointDependency row exists.
func ServiceEndpointDependencyExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"service_endpoint_dependency\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if service_endpoint_dependency exists")
	}

	return exists, nil
}
