// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ServiceEndpoint is an object representing the database table.
type ServiceEndpoint struct {
	ID        int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	ServiceID int64  `boil:"service_id" json:"service_id" toml:"service_id" yaml:"service_id"`
	Code      string `boil:"code" json:"code" toml:"code" yaml:"code"`
	Name      string `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *serviceEndpointR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L serviceEndpointL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ServiceEndpointColumns = struct {
	ID        string
	ServiceID string
	Code      string
	Name      string
}{
	ID:        "id",
	ServiceID: "service_id",
	Code:      "code",
	Name:      "name",
}

// Generated where

var ServiceEndpointWhere = struct {
	ID        whereHelperint64
	ServiceID whereHelperint64
	Code      whereHelperstring
	Name      whereHelperstring
}{
	ID:        whereHelperint64{field: "\"service_endpoint\".\"id\""},
	ServiceID: whereHelperint64{field: "\"service_endpoint\".\"service_id\""},
	Code:      whereHelperstring{field: "\"service_endpoint\".\"code\""},
	Name:      whereHelperstring{field: "\"service_endpoint\".\"name\""},
}

// ServiceEndpointRels is where relationship names are stored.
var ServiceEndpointRels = struct {
	Service                     string
	ServiceEndpointDependencies string
}{
	Service:                     "Service",
	ServiceEndpointDependencies: "ServiceEndpointDependencies",
}

// serviceEndpointR is where relationships are stored.
type serviceEndpointR struct {
	Service                     *Service                       `boil:"Service" json:"Service" toml:"Service" yaml:"Service"`
	ServiceEndpointDependencies ServiceEndpointDependencySlice `boil:"ServiceEndpointDependencies" json:"ServiceEndpointDependencies" toml:"ServiceEndpointDependencies" yaml:"ServiceEndpointDependencies"`
}

// NewStruct creates a new relationship struct
func (*serviceEndpointR) NewStruct() *serviceEndpointR {
	return &serviceEndpointR{}
}

// serviceEndpointL is where Load methods for each relationship are stored.
type serviceEndpointL struct{}

var (
	serviceEndpointAllColumns            = []string{"id", "service_id", "code", "name"}
	serviceEndpointColumnsWithoutDefault = []string{"service_id", "code", "name"}
	serviceEndpointColumnsWithDefault    = []string{"id"}
	serviceEndpointPrimaryKeyColumns     = []string{"id"}
)

type (
	// ServiceEndpointSlice is an alias for a slice of pointers to ServiceEndpoint.
	// This should generally be used opposed to []ServiceEndpoint.
	ServiceEndpointSlice []*ServiceEndpoint
	// ServiceEndpointHook is the signature for custom ServiceEndpoint hook methods
	ServiceEndpointHook func(context.Context, boil.ContextExecutor, *ServiceEndpoint) error

	serviceEndpointQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	serviceEndpointType                 = reflect.TypeOf(&ServiceEndpoint{})
	serviceEndpointMapping              = queries.MakeStructMapping(serviceEndpointType)
	serviceEndpointPrimaryKeyMapping, _ = queries.BindMapping(serviceEndpointType, serviceEndpointMapping, serviceEndpointPrimaryKeyColumns)
	serviceEndpointInsertCacheMut       sync.RWMutex
	serviceEndpointInsertCache          = make(map[string]insertCache)
	serviceEndpointUpdateCacheMut       sync.RWMutex
	serviceEndpointUpdateCache          = make(map[string]updateCache)
	serviceEndpointUpsertCacheMut       sync.RWMutex
	serviceEndpointUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var serviceEndpointBeforeInsertHooks []ServiceEndpointHook
var serviceEndpointBeforeUpdateHooks []ServiceEndpointHook
var serviceEndpointBeforeDeleteHooks []ServiceEndpointHook
var serviceEndpointBeforeUpsertHooks []ServiceEndpointHook

var serviceEndpointAfterInsertHooks []ServiceEndpointHook
var serviceEndpointAfterSelectHooks []ServiceEndpointHook
var serviceEndpointAfterUpdateHooks []ServiceEndpointHook
var serviceEndpointAfterDeleteHooks []ServiceEndpointHook
var serviceEndpointAfterUpsertHooks []ServiceEndpointHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ServiceEndpoint) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serviceEndpointBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ServiceEndpoint) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serviceEndpointBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ServiceEndpoint) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serviceEndpointBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ServiceEndpoint) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serviceEndpointBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ServiceEndpoint) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serviceEndpointAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ServiceEndpoint) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serviceEndpointAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ServiceEndpoint) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serviceEndpointAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ServiceEndpoint) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serviceEndpointAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ServiceEndpoint) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serviceEndpointAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddServiceEndpointHook registers your hook function for all future operations.
func AddServiceEndpointHook(hookPoint boil.HookPoint, serviceEndpointHook ServiceEndpointHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		serviceEndpointBeforeInsertHooks = append(serviceEndpointBeforeInsertHooks, serviceEndpointHook)
	case boil.BeforeUpdateHook:
		serviceEndpointBeforeUpdateHooks = append(serviceEndpointBeforeUpdateHooks, serviceEndpointHook)
	case boil.BeforeDeleteHook:
		serviceEndpointBeforeDeleteHooks = append(serviceEndpointBeforeDeleteHooks, serviceEndpointHook)
	case boil.BeforeUpsertHook:
		serviceEndpointBeforeUpsertHooks = append(serviceEndpointBeforeUpsertHooks, serviceEndpointHook)
	case boil.AfterInsertHook:
		serviceEndpointAfterInsertHooks = append(serviceEndpointAfterInsertHooks, serviceEndpointHook)
	case boil.AfterSelectHook:
		serviceEndpointAfterSelectHooks = append(serviceEndpointAfterSelectHooks, serviceEndpointHook)
	case boil.AfterUpdateHook:
		serviceEndpointAfterUpdateHooks = append(serviceEndpointAfterUpdateHooks, serviceEndpointHook)
	case boil.AfterDeleteHook:
		serviceEndpointAfterDeleteHooks = append(serviceEndpointAfterDeleteHooks, serviceEndpointHook)
	case boil.AfterUpsertHook:
		serviceEndpointAfterUpsertHooks = append(serviceEndpointAfterUpsertHooks, serviceEndpointHook)
	}
}

// One returns a single serviceEndpoint record from the query.
func (q serviceEndpointQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceEndpoint, error) {
	o := &ServiceEndpoint{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for service_endpoint")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ServiceEndpoint records from the query.
func (q serviceEndpointQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceEndpointSlice, error) {
	var o []*ServiceEndpoint

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ServiceEndpoint slice")
	}

	if len(serviceEndpointAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ServiceEndpoint records in the query.
func (q serviceEndpointQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count service_endpoint rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q serviceEndpointQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if service_endpoint exists")
	}

	return count > 0, nil
}

// Service pointed to by the foreign key.
func (o *ServiceEndpoint) Service(mods ...qm.QueryMod) serviceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ServiceID),
	}

	queryMods = append(queryMods, mods...)

	query := Services(queryMods...)
	queries.SetFrom(query.Query, "\"service\"")

	return query
}

// ServiceEndpointDependencies retrieves all the service_endpoint_dependency's ServiceEndpointDependencies with an executor.
func (o *ServiceEndpoint) ServiceEndpointDependencies(mods ...qm.QueryMod) serviceEndpointDependencyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"service_endpoint_dependency\".\"service_endpoint_id\"=?", o.ID),
	)

	query := ServiceEndpointDependencies(queryMods...)
	queries.SetFrom(query.Query, "\"service_endpoint_dependency\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"service_endpoint_dependency\".*"})
	}

	return query
}

// LoadService allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (serviceEndpointL) LoadService(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceEndpoint interface{}, mods queries.Applicator) error {
	var slice []*ServiceEndpoint
	var object *ServiceEndpoint

	if singular {
		object = maybeServiceEndpoint.(*ServiceEndpoint)
	} else {
		slice = *maybeServiceEndpoint.(*[]*ServiceEndpoint)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &serviceEndpointR{}
		}
		args = append(args, object.ServiceID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &serviceEndpointR{}
			}

			for _, a := range args {
				if a == obj.ServiceID {
					continue Outer
				}
			}

			args = append(args, obj.ServiceID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`service`),
		qm.WhereIn(`service.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Service")
	}

	var resultSlice []*Service
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Service")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for service")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for service")
	}

	if len(serviceEndpointAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Service = foreign
		if foreign.R == nil {
			foreign.R = &serviceR{}
		}
		foreign.R.ServiceEndpoints = append(foreign.R.ServiceEndpoints, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ServiceID == foreign.ID {
				local.R.Service = foreign
				if foreign.R == nil {
					foreign.R = &serviceR{}
				}
				foreign.R.ServiceEndpoints = append(foreign.R.ServiceEndpoints, local)
				break
			}
		}
	}

	return nil
}

// LoadServiceEndpointDependencies allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (serviceEndpointL) LoadServiceEndpointDependencies(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceEndpoint interface{}, mods queries.Applicator) error {
	var slice []*ServiceEndpoint
	var object *ServiceEndpoint

	if singular {
		object = maybeServiceEndpoint.(*ServiceEndpoint)
	} else {
		slice = *maybeServiceEndpoint.(*[]*ServiceEndpoint)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &serviceEndpointR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &serviceEndpointR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`service_endpoint_dependency`),
		qm.WhereIn(`service_endpoint_dependency.service_endpoint_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load service_endpoint_dependency")
	}

	var resultSlice []*ServiceEndpointDependency
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice service_endpoint_dependency")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on service_endpoint_dependency")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for service_endpoint_dependency")
	}

	if len(serviceEndpointDependencyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ServiceEndpointDependencies = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &serviceEndpointDependencyR{}
			}
			foreign.R.ServiceEndpoint = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ServiceEndpointID {
				local.R.ServiceEndpointDependencies = append(local.R.ServiceEndpointDependencies, foreign)
				if foreign.R == nil {
					foreign.R = &serviceEndpointDependencyR{}
				}
				foreign.R.ServiceEndpoint = local
				break
			}
		}
	}

	return nil
}

// SetService of the serviceEndpoint to the related item.
// Sets o.R.Service to related.
// Adds o to related.R.ServiceEndpoints.
func (o *ServiceEndpoint) SetService(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Service) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"service_endpoint\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"service_id"}),
		strmangle.WhereClause("\"", "\"", 2, serviceEndpointPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ServiceID = related.ID
	if o.R == nil {
		o.R = &serviceEndpointR{
			Service: related,
		}
	} else {
		o.R.Service = related
	}

	if related.R == nil {
		related.R = &serviceR{
			ServiceEndpoints: ServiceEndpointSlice{o},
		}
	} else {
		related.R.ServiceEndpoints = append(related.R.ServiceEndpoints, o)
	}

	return nil
}

// AddServiceEndpointDependencies adds the given related objects to the existing relationships
// of the service_endpoint, optionally inserting them as new records.
// Appends related to o.R.ServiceEndpointDependencies.
// Sets related.R.ServiceEndpoint appropriately.
func (o *ServiceEndpoint) AddServiceEndpointDependencies(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceEndpointDependency) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ServiceEndpointID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"service_endpoint_dependency\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"service_endpoint_id"}),
				strmangle.WhereClause("\"", "\"", 2, serviceEndpointDependencyPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ServiceEndpointID = o.ID
		}
	}

	if o.R == nil {
		o.R = &serviceEndpointR{
			ServiceEndpointDependencies: related,
		}
	} else {
		o.R.ServiceEndpointDependencies = append(o.R.ServiceEndpointDependencies, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &serviceEndpointDependencyR{
				ServiceEndpoint: o,
			}
		} else {
			rel.R.ServiceEndpoint = o
		}
	}
	return nil
}

// ServiceEndpoints retrieves all the records using an executor.
func ServiceEndpoints(mods ...qm.QueryMod) serviceEndpointQuery {
	mods = append(mods, qm.From("\"service_endpoint\""))
	return serviceEndpointQuery{NewQuery(mods...)}
}

// FindServiceEndpoint retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindServiceEndpoint(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ServiceEndpoint, error) {
	serviceEndpointObj := &ServiceEndpoint{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"service_endpoint\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, serviceEndpointObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from service_endpoint")
	}

	return serviceEndpointObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ServiceEndpoint) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no service_endpoint provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(serviceEndpointColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	serviceEndpointInsertCacheMut.RLock()
	cache, cached := serviceEndpointInsertCache[key]
	serviceEndpointInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			serviceEndpointAllColumns,
			serviceEndpointColumnsWithDefault,
			serviceEndpointColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(serviceEndpointType, serviceEndpointMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(serviceEndpointType, serviceEndpointMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"service_endpoint\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"service_endpoint\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into service_endpoint")
	}

	if !cached {
		serviceEndpointInsertCacheMut.Lock()
		serviceEndpointInsertCache[key] = cache
		serviceEndpointInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ServiceEndpoint.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ServiceEndpoint) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	serviceEndpointUpdateCacheMut.RLock()
	cache, cached := serviceEndpointUpdateCache[key]
	serviceEndpointUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			serviceEndpointAllColumns,
			serviceEndpointPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update service_endpoint, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"service_endpoint\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, serviceEndpointPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(serviceEndpointType, serviceEndpointMapping, append(wl, serviceEndpointPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update service_endpoint row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for service_endpoint")
	}

	if !cached {
		serviceEndpointUpdateCacheMut.Lock()
		serviceEndpointUpdateCache[key] = cache
		serviceEndpointUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q serviceEndpointQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for service_endpoint")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for service_endpoint")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ServiceEndpointSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serviceEndpointPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"service_endpoint\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, serviceEndpointPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in serviceEndpoint slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all serviceEndpoint")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ServiceEndpoint) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no service_endpoint provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(serviceEndpointColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	serviceEndpointUpsertCacheMut.RLock()
	cache, cached := serviceEndpointUpsertCache[key]
	serviceEndpointUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			serviceEndpointAllColumns,
			serviceEndpointColumnsWithDefault,
			serviceEndpointColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			serviceEndpointAllColumns,
			serviceEndpointPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert service_endpoint, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(serviceEndpointPrimaryKeyColumns))
			copy(conflict, serviceEndpointPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"service_endpoint\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(serviceEndpointType, serviceEndpointMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(serviceEndpointType, serviceEndpointMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert service_endpoint")
	}

	if !cached {
		serviceEndpointUpsertCacheMut.Lock()
		serviceEndpointUpsertCache[key] = cache
		serviceEndpointUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ServiceEndpoint record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ServiceEndpoint) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ServiceEndpoint provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), serviceEndpointPrimaryKeyMapping)
	sql := "DELETE FROM \"service_endpoint\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from service_endpoint")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for service_endpoint")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q serviceEndpointQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no serviceEndpointQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from service_endpoint")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for service_endpoint")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ServiceEndpointSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(serviceEndpointBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serviceEndpointPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"service_endpoint\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, serviceEndpointPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from serviceEndpoint slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for service_endpoint")
	}

	if len(serviceEndpointAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ServiceEndpoint) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindServiceEndpoint(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ServiceEndpointSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ServiceEndpointSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serviceEndpointPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"service_endpoint\".* FROM \"service_endpoint\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, serviceEndpointPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ServiceEndpointSlice")
	}

	*o = slice

	return nil
}

// ServiceEndpointExists checks if the ServiceEndpoint row exists.
func ServiceEndpointExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"service_endpoint\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if service_endpoint exists")
	}

	return exists, nil
}
